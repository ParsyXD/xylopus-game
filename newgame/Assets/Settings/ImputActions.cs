//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/ImputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ImputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ImputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ImputActions"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""f38a7171-0786-4c58-8ad4-e34d26dc637f"",
            ""actions"": [
                {
                    ""name"": ""PickUp"",
                    ""type"": ""Button"",
                    ""id"": ""82a9c0f5-0bbb-4d69-8346-2e15dd41901d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""f2f1fdf6-6725-4954-a5a1-f8e90b40e27d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""20ed40fc-cf6f-465b-8972-47deee1f144e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""81db4810-15ac-42ad-a80d-37021032ae41"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97e26eaa-235d-46e2-8dbb-1fba430091da"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef412fd4-956d-47a3-b434-bfa45a5f3e6f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_PickUp = m_Default.FindAction("PickUp", throwIfNotFound: true);
        m_Default_Inventory = m_Default.FindAction("Inventory", throwIfNotFound: true);
        m_Default_PauseMenu = m_Default.FindAction("PauseMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_PickUp;
    private readonly InputAction m_Default_Inventory;
    private readonly InputAction m_Default_PauseMenu;
    public struct DefaultActions
    {
        private @ImputActions m_Wrapper;
        public DefaultActions(@ImputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PickUp => m_Wrapper.m_Default_PickUp;
        public InputAction @Inventory => m_Wrapper.m_Default_Inventory;
        public InputAction @PauseMenu => m_Wrapper.m_Default_PauseMenu;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @PickUp.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPickUp;
                @PickUp.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPickUp;
                @PickUp.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPickUp;
                @Inventory.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnInventory;
                @PauseMenu.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPauseMenu;
                @PauseMenu.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPauseMenu;
                @PauseMenu.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPauseMenu;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PickUp.started += instance.OnPickUp;
                @PickUp.performed += instance.OnPickUp;
                @PickUp.canceled += instance.OnPickUp;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @PauseMenu.started += instance.OnPauseMenu;
                @PauseMenu.performed += instance.OnPauseMenu;
                @PauseMenu.canceled += instance.OnPauseMenu;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnPickUp(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnPauseMenu(InputAction.CallbackContext context);
    }
}
